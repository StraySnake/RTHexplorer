#!/bin/bash

# ====== CONFIGURATION ======
ROUTER_IP="192.168.8.1"
USERNAME="admin"
PASSWORD="admin123"

PHONE_NUMBER="$1"
MESSAGE="$2"

if [[ -z "$PHONE_NUMBER" || -z "$MESSAGE" ]]; then
  echo "❌ Usage: $0 <phone_number> <message>"
  exit 1
fi

# Function SHA256 → HEX → BASE64 (Python-compliant version)
sha256_hexstring_to_base64() {
    local input_str="$1"

    # SHA256 (HEX string)
    local sha256_hex=$(echo -n "$input_str" | openssl dgst -sha256 -hex | awk '{print $2}')

    # Base64 encode the HEX string directly (not as bytes)
    echo -n "$sha256_hex" | base64 -w 0
}

# ====== HTTPS Connection ======
echo "[*] Connecting to: https://$ROUTER_IP/html/home.html"

COOKIE_JAR=$(mktemp)

RESPONSE=$(curl -sk -D - --cookie-jar "$COOKIE_JAR" "https://$ROUTER_IP/html/home.html")

# Extract SessionID from cookie jar
SESSIONID=$(grep SessionID "$COOKIE_JAR" | awk '{print $7}')
if [[ -z "$SESSIONID" ]]; then
  echo "❌ SessionID not found!"
  rm "$COOKIE_JAR"
  exit 1
fi
echo "[+] SessionID: $SESSIONID"

# Extract CSRF Token from HTML response
CSRF_TOKENS=$(echo "$RESPONSE" | grep -oP '<meta name="csrf_token" content="\K[^"]+')
CSRF_TOKEN=$(echo "$CSRF_TOKENS" | tail -n 1)
CSRF_TOKEN=$(echo "$CSRF_TOKEN" | tr -cd '[:alnum:]')

if [[ -z "$CSRF_TOKEN" ]]; then
  echo "❌ CSRF Token not found..."
  rm "$COOKIE_JAR"
  exit 1
fi
echo "[+] CSRF Token: $CSRF_TOKEN"

# ====== Authentication ======
echo "[*] Hashing the password..."
PASSWORD_HASHED=$(sha256_hexstring_to_base64 "$PASSWORD")
CONCAT="${USERNAME}${PASSWORD_HASHED}${CSRF_TOKEN}"

FINAL_PASSWORD=$(sha256_hexstring_to_base64 "$CONCAT")
echo "[+] Password final to send: $FINAL_PASSWORD"

# ====== Sending login request ======
echo "[*] Attempting login..."

LOGIN_XML="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<request>
  <Username>$USERNAME</Username>
  <Password>$FINAL_PASSWORD</Password>
  <password_type>4</password_type>
</request>"

LOGIN_RESPONSE=$(curl -sk -b "$COOKIE_JAR" --cookie-jar "$COOKIE_JAR" \
  -H "__RequestVerificationToken: $CSRF_TOKEN" \
  -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
  -X POST "https://$ROUTER_IP/api/user/login" \
  --data "$LOGIN_XML")

if echo "$LOGIN_RESPONSE" | grep -q "<response>OK</response>"; then
  echo "✅ Login successful!"
else
  echo "❌ Login failed!"
  echo "$LOGIN_RESPONSE"
  rm "$COOKIE_JAR"
  exit 1
fi

# ====== Sending the SMS ======
echo "[*] Sending SMS to $PHONE_NUMBER: \"$MESSAGE\""

# Get new CSRF Token after login
NEW_CSRF_TOKEN=$(curl -sk -b "$COOKIE_JAR" "https://$ROUTER_IP/api/webserver/token" | grep -oP "<token>\K[^<]+")

if [[ -z "$NEW_CSRF_TOKEN" ]]; then
  echo "❌ Failed to get new CSRF Token for SMS."
  rm "$COOKIE_JAR"
  exit 1
fi
echo "[+] New CSRF Token: $NEW_CSRF_TOKEN"

# Prepare SMS XML
SMS_XML="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<request>
  <Index>-1</Index>
  <Phones>
    <Phone>$PHONE_NUMBER</Phone>
  </Phones>
  <Sca></Sca>
  <Content>$MESSAGE</Content>
  <Length>${#MESSAGE}</Length>
  <Reserved>1</Reserved>
  <Date>$(date "+%Y-%m-%d %H:%M:%S")</Date>
</request>"

# Send SMS
SMS_RESPONSE=$(curl -sk -b "$COOKIE_JAR" \
  -H "__RequestVerificationToken: $NEW_CSRF_TOKEN" \
  -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" \
  -X POST "https://$ROUTER_IP/api/sms/send-sms" \
  --data "$SMS_XML")

if echo "$SMS_RESPONSE" | grep -q "<response>OK</response>"; then
  echo "✅ SMS successfully sent!"
else
  echo "❌ SMS sending failed!"
  echo "$SMS_RESPONSE"
  rm "$COOKIE_JAR"
  exit 1
fi

# Clean up
rm "$COOKIE_JAR"
